
<!-- ===================== DO NOT EDIT THIS FILE ========================== -->
<!-- ===================== DO NOT EDIT THIS FILE ========================== -->
<!-- ===================== DO NOT EDIT THIS FILE ========================== -->
<!-- This is the OIS standard build file.  It is designed to be generic     -->
<!-- enough to support building standalone jars, command-line apps,         -->
<!-- web applications, or all of the above.  Any change should be           -->
<!-- generalized into a new version of this file in CVS.                    -->
<!--                                                                        -->
<!-- If you must modify this file locally, please remove all of this text   -->
<!-- and rename the project name below.  Thanks.                            -->
<!-- ====================================================================== -->

<project name="OIS Standard Internal Build File" default="compile" basedir=".">

<!-- ===================== Property Definitions =========================== -->

  <property file="build-local.properties"/>
  <property file="project.properties"/>
  <property file="conf/global_properties/build-global.properties"/>

<!-- ==================== File and Directory Names ======================== -->

  <property name="ois.buildfile.type"    value="internal-build"/>
  <property name="ois.buildfile.version" value="1.0.5"/>
  <property name="app.name"              value="${project.shortName}"/>
  <property name="context.name"          value="${app.name}"/>
  <property name="jar.name"	         	 value="${app.name}.jar"/>
  <property name="jar.home"	         	 value="lib"/>
  <property name="catalina.home"         value="/usr/local/tomcat"/>
  <property name="catalina.base"         value="tomcat"/>
  <property name="catalina.conf"         value="${catalina.base}/conf"/>
  <property name="config.home"	         value="conf"/>
  <property name="compile.dirs"	         value="src"/>
  <property name="build.home"            value="${catalina.base}/webapps/${context.name}"/>
  <property name="webinf.home"           value="${build.home}/WEB-INF"/>
  <property name="webxml.home"           value="${webinf.home}/web.xml"/>
  <property name="javadoc.home"          value="/src/java/ois/doc/${app.name}"/>
  <property name="manifest.name"         value="MANIFEST.MF"/>

<!-- ===================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== Compilation Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="compile.classpath">
    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <fileset dir=".">
      <include name="lib/*.jar"/>
      <include name="tomcat/webapps/${context.name}/WEB-INF/lib/*.jar"/>
    </fileset>
  </path>

<!-- ==================== Task Definitions ================================== -->

<!-- External task for checking jar versions -->
 <taskdef name="versioncheck" 
     classname="edu.harvard.hul.ois.ant.VersionTask"
     classpath="/src/java/ois/versiontask.jar"/>

<!-- ==================== Config Target ================================== -->


  <filterset id="blp.filterset"/>

  <target name="init-build-local.properties" if="blp.available" depends="check-build-local.properties">
  	<echo>build-local.properties found</echo>
    <filterset id="blp.filterset">
      <filtersfile file="build-local.properties"/>
    </filterset>
  </target>

  <target name="check-build-local.properties">
    <available file="build-local.properties" type="file" property="blp.available"/>
  </target>
	
  <macrodef name="propertycopy">
    <attribute name="name" />
    <attribute name="from" />
    <sequential>
      <property name="@{name}" value="${@{from}}" />
    </sequential>
  </macrodef>
	
	<target name="run-post-config" if="post-config.available" depends="post-config.check">
		<echo>post-config.sh found...executing</echo>
		<!-- make post-config.sh executable -->	
	     <exec dir="${project.base}/${project.dir}/bin" executable="/bin/chmod">
	       <arg line="+x post-config.sh"/>
	     </exec> 
		<!-- call post-config.sh-->
		<exec executable="${project.base}/${project.dir}/bin/post-config.sh">
			<arg line="${instance}"/> 
		</exec>
	</target>
  	
  <target name="post-config.check">
  	<echo>checking for bin/post-config.sh</echo>
	<available file="${project.base}/${project.dir}/bin/post-config.sh" type="file" property="post-config.available"/>
  </target>

  <target name="config" depends="check-instance-location, check-instance-stdin,
                                 check-tomcat-location, check-tomcat-user, init-build-local.properties">

    <dirname property="project.base" file="." />

    <echo>project.base: ${project.base}</echo>
    <echo>instance: ${instance}</echo>

    <copy overwrite="true" todir="${config.home}">
      <fileset dir="${config.home}/templates"/>
      <filterset refid="blp.filterset"/>
      <filterset>
        <filter token="project.base" value="${project.base}/${project.dir}" />
        <filtersfile file="${global.properties.directory}/config-${instance}.properties"/>
      	<filtersfile file="project.properties"/>
      </filterset>
    </copy>

    <echo>tomcatHttpPort: ${tomcatHttpPort}</echo>
    <echo>tomcatConnectorPort: ${tomcatConnectorPort}</echo>
    <echo>tomcatShutdownPort: ${tomcatShutdownPort}</echo>

    <copy overwrite="true" todir="${catalina.conf}">
      <fileset dir="${catalina.conf}">
        <include name="*.template" />
      </fileset>
      <filterset refid="blp.filterset"/>
      <filterset>
        <filter token="project.base" value="${project.base}/${project.dir}" />
        <filtersfile file="${global.properties.directory}/config-${instance}.properties"/>
   	  	<filtersfile file="project.properties"/>
      </filterset>
      <filterset>
        <filter token="tomcatHttpPort" value="${tomcatHttpPort}" />
        <filter token="tomcatConnectorPort" value="${tomcatConnectorPort}" />
        <filter token="tomcatShutdownPort" value="${tomcatShutdownPort}" />
        <filter token="app.name" value="${app.name}" />
      </filterset>
      <globmapper from="*.template" to="*" /> 
    </copy>

    <copy overwrite="true" todir="${webinf.home}">
      <fileset dir="${webinf.home}">
        <include name="*.template" />
      </fileset>
      <filterset refid="blp.filterset"/>
      <filterset>
        <filter token="project.base" value="${project.base}/${project.dir}" />
        <filtersfile file="${global.properties.directory}/config-${instance}.properties"/>
      	<filtersfile file="project.properties"/>
      </filterset>
      <globmapper from="*.template" to="*" /> 
    </copy>
  	
  	<antcall target="run-post-config" />

  </target>


<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare">

    <antcall target="prepare-webapps" />

  </target>


  <target name="prepare-webapps" if="tomcat.present" depends="check-tomcat">

    <mkdir  dir="${build.home}/WEB-INF/lib"/>
    <copy todir="${build.home}/WEB-INF/lib">
        <fileset dir="lib">
	  <include name="*.jar"/>
	</fileset>
    </copy>

  </target>

<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.

-->

  <target name="compile" description="Compile Java sources" 
          depends="prepare, check-versions">

    <antcall target="compile-nowebapps" />
    <antcall target="compile-withwebapps" />

    <antcall target="create-tmp-jar" />

    <antcall target="compile-copy-lib" />
    <antcall target="compile-copy-webapps" />
    <antcall target="compile-copy-webapps-soap" />

    <antcall target="delete-tmp-jar" />

  </target>

  <target name="compile-nowebapps" unless="tomcat.present" depends="check-tomcat">
    <javac srcdir="${compile.dirs}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
	   optimize="${compile.optimize}">
        <classpath refid="compile.classpath">
        </classpath>
    </javac>
  </target>

  <target name="compile-withwebapps" if="tomcat.present" depends="check-tomcat">
    <javac srcdir="${compile.dirs}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
	   optimize="${compile.optimize}">
        <classpath>
          <path refid="compile.classpath"/>
          <fileset dir="${catalina.home}">
             <include name="common/endorsed/*.jar" /> 
          </fileset>
          <fileset dir="${catalina.home}">
             <include name="common/lib/*.jar"/>
          </fileset>
          <fileset dir="${catalina.home}">
             <include name="server/lib/*.jar"/>
          </fileset>
        </classpath>
    </javac>
  </target>

  <target name="compile-copy-lib" if="lib.present" depends="check-lib">
    <copy file="${app.name}.jar" todir="lib" />
  </target>

  <target name="compile-copy-webapps" if="tomcat.present" depends="check-tomcat">
    <copy file="${app.name}.jar" todir="${build.home}/WEB-INF/lib"/>
  </target>

  <target name="compile-copy-webapps-soap" if="project.soapwsdd">
    <java classname="org.apache.axis.utils.Admin"
          fork="true" dir="${build.home}/WEB-INF">
        <arg value="server" />
        <arg value="${basedir}/${project.soapwsdd}" />
        <classpath>
          <path refid="compile.classpath"/>
        </classpath>
    </java>
  </target>


<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete quiet="true">
       <fileset  dir="src" includes="**/*.class"/>
    </delete>
  </target>


<!-- ===================== Create Tmp Jar Target ========================== -->

  <target name="create-tmp-jar"
          description="Create the jar for this project">
    <antcall target="create-manifest" />
    <antcall target="create-tmp-jar-src" />
    <antcall target="delete-manifest" />
  </target>

  <target name="create-tmp-jar-src" if="src.present" depends="check-src">
    <jar jarfile="${app.name}.jar"
         update="true"
	 manifest="${manifest.name}">
         <fileset dir="src">
	   <include name="**/*.class"/>
	   <include name="**/*.java"/>
	   <include name="**/*.properties"/>
	   <include name="**/*.xml"/>
	 </fileset>
    </jar>
  </target>

  <target name="create-manifest"
          description="Create the manifest for the jar file">
    
    <condition property="jar.version" 
               value="${cvs.version.major}.${cvs.version.minor}.${cvs.version.micro}">
      <and>
        <isset property="cvs.version.major" />
        <isset property="cvs.version.minor" />
        <isset property="cvs.version.micro" />
      </and>
    </condition>

    <tstamp>
      <format property="timestamp.isoformat"
              pattern="yyyy-MM-dd'T'HH:mm:ss"/>
    </tstamp>

    <condition property="build.timestamp" value="development" else="${timestamp.isoformat}">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <condition property="build.date" value="development" else="${TODAY}">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <condition property="jar.version" value="development">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <manifest file="${manifest.name}">
      <attribute name="Application-Name" value="${project.longName}"/>
      <attribute name="Specification-Title" value="${project.shortName} Java Classes"/>
      <attribute name="Specification-Version" value="${jar.version}"/>
      <attribute name="Implementation-Title" value="${project.package}"/>
      <attribute name="Implementation-Version" value="${jar.version}"/>
      <attribute name="Implementation-Vendor" value="OIS Harvard University Library"/>
      <attribute name="Build-Date" value="${build.date}"/>
      <attribute name="Build-Timestamp" value="${build.timestamp}"/>
    </manifest>
  </target>

  <target name="delete-manifest"
          description="Deletes the tmp manifest file">
    <delete quiet="true" file="${manifest.name}" />
  </target>

  <target name="delete-tmp-jar"
          description="Delete the tmp jar for this project">
    <delete file="${app.name}.jar" quiet="true" />
  </target>

    
<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile-nowebapps, compile-withwebapps"
   description="Create Javadoc API documentation">

    <mkdir          dir="${javadoc.home}"/>
    <javadoc    destdir="${javadoc.home}"
           packagenames="*">
      <fileset dir=".">
	<include name="src/**/*.java"/>
      </fileset>
      <classpath refid="compile.classpath"/>
    </javadoc>

  </target>

<!-- ======================== CVS Release Target ========================== -->

  <target name="cvs-release" depends="check-cvs.existing">

     <!-- TBD: verify all jars in lib -->
     <!-- TBD: check for RELEASE.txt -->

     <fail unless="cvs.version.present" message="cvs.version.* properties not set in project.properties"/>

     <cvs command="tag ${app.name}_${cvs.version.major}_${cvs.version.minor}_${cvs.version.micro}_release"
          failonerror="true"
     />

     <!-- create a new directory for this release in the archives -->
     <property name="archive.directory"
               value="${source.archive}/${app.name}-${cvs.version.major}.${cvs.version.minor}.${cvs.version.micro}"/>

     <!-- make the new archive directory and copy the jar file to it-->
     <mkdir dir="${archive.directory}"/>
     <copy file="${jar.home}/${jar.name}" tofile="${archive.directory}/${jar.name}"/>

     <!-- recreate the symbolic link to point to the new version of -->
     <!-- the jar file -->
     <delete file="${source.directory}/${jar.name}"/>
     <exec dir="${source.directory}" executable="/bin/ln">
       <arg line="-s ${archive.directory}/${jar.name} ${jar.name}"/>
     </exec> 
  </target>

<!-- ==================== Check and Set Targets =========================== -->

  <target name="check-conf">
    <available file="conf" type="dir" property="conf.present" />
  </target>

  <target name="check-lib">
    <available file="lib" type="dir" property="lib.present" />
  </target>

  <target name="check-src">
    <available file="src" type="dir" property="src.present" />
  </target>

  <target name="check-tomcat">
    <available file="tomcat" type="dir" property="tomcat.present" />
  </target>

  <target name="check-cvs.version">
    <condition property="cvs.version.present">
      <and>
        <isset property="cvs.version.major" />
        <isset property="cvs.version.minor" />
        <isset property="cvs.version.micro" />
      </and>
    </condition>
  </target>

  <target name="check-instance-location" unless="instance">

    <dirname property="project.base" file="." />
    <basename property="project.dir" file="." />
   
    <condition property="instance" value="prod">
      <equals arg1="${project.base}/${project.dir}" arg2="/home/${app.name}/prod" />
    </condition>
    <condition property="instance" value="qa">
      <equals arg1="${project.base}/${project.dir}" arg2="/home/${app.name}/qa" />
    </condition>
    <condition property="instance" value="dev">
      <equals arg1="${project.base}/${project.dir}" arg2="/home/${app.name}/dev" />
    </condition>
    
  </target>


  <target name="check-instance-stdin" unless="instance">
    <echo>
       You will be prompted for the instance.
    </echo>
     <input message="Enter instance you want to use:"
            validargs="dev,qa,prod"
            addproperty="instance" />
  </target>


  <target name="check-user">

    <exec executable="whoami" outputproperty="whoami" />

    <condition property="admin.user" value="true">
      <equals arg1="${whoami}" arg2="${unix.user}" />
    </condition>
  </target>


  <target name="check-tomcat-location" if="admin.user" depends="check-user">
     <property file="${global.properties.directory}/config-${instance}.properties"/>
     <propertycopy name="tomcatHttpPort" from="${app.name}TomcatHttpPort" />
     <propertycopy name="tomcatConnectorPort" from="${app.name}TomcatConnectorPort" />
     <propertycopy name="tomcatShutdownPort" from="${app.name}TomcatShutdownPort" />
  </target>


  <target name="check-tomcat-user" unless="admin.user" depends="check-user">
     <exec executable="id" outputproperty="userid">
       <arg line="-u" />
     </exec>
     <property name="tomcatHttpPort" value="${userid}0" />
     <property name="tomcatConnectorPort" value="${userid}1" />
     <property name="tomcatShutdownPort" value="${userid}2" />
  </target>

  <target name="check-cvs.existing" depends="check-cvs.version">
    <fail unless="cvs.version.present" message="cvs.version.* properties not set in project.properties"/>
    <exec executable="sh" outputproperty="cvs.output">
      <arg line="-c 'cvs status -v build.xml | grep ${app.name}_${cvs.version.major}_${cvs.version.minor}_${cvs.version.micro}_release'" />
    </exec>
    
    <condition property="cvs.notupdated">
      <length string="${cvs.output}" trim="true" when="greater" length="0" />
    </condition>

     <fail if="cvs.notupdated" message="cvs release ${app.name}_${cvs.version.major}_${cvs.version.minor}_${cvs.version.micro}_release already exists" />
  </target>

<!-- ======================== JAR Version Check Target ========================== -->

  <target name="check-versions">
    <versioncheck archivedir="/src/java/ois" libdir="./lib"/>
  </target>


</project>
